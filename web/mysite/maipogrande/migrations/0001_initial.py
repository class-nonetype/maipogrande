# Generated by Django 4.1.2 on 2022-11-29 22:32

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('type', models.CharField(choices=[('PRODUCTOR', 'PRODUCTOR'), ('CONSULTOR', 'CONSULTOR'), ('CLIENTE EXTERNO', 'CLIENTE EXTERNO'), ('CLIENTE INTERNO', 'CLIENTE INTERNO'), ('TRANSPORTISTA', 'TRANSPORTISTA')], default='CLIENTE EXTERNO', max_length=15)),
                ('identity_document_number', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(100000), django.core.validators.MaxValueValidator(99999999999)])),
                ('country', models.CharField(choices=[('US', 'United States'), ('AF', 'Afghanistan'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AS', 'American Samoa'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua And Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia'), ('BA', 'Bosnia And Herzegowina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Rep'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('CX', 'Christmas Island'), ('CC', 'Cocos Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', 'Cote D`ivoire'), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('TP', 'East Timor'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French S. Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GU', 'Guam'), ('GT', 'Guatemala'), ('GN', 'Guinea'), ('GW', 'Guinea-bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HN', 'Honduras'), ('HK', 'Hong Kong'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', 'Korea (North)'), ('KR', 'Korea (South)'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', 'Laos'), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macau'), ('MK', 'Macedonia'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MH', 'Marshall Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('FM', 'Micronesia'), ('MD', 'Moldova'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('AN', 'Netherlands Antilles'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('MP', 'Northern Mariana Islands'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PW', 'Palau'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('PR', 'Puerto Rico'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('KN', 'Saint Kitts And Nevis'), ('LC', 'Saint Lucia'), ('VC', 'St Vincent/Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SH', 'St. Helena'), ('PM', 'St.Pierre'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TW', 'Taiwan'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania'), ('TH', 'Thailand'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad And Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('UK', 'United Kingdom'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VA', 'Vatican City State'), ('VE', 'Venezuela'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands (British)'), ('VI', 'Virgin Islands (U.S.)'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('YU', 'Yugoslavia'), ('ZR', 'Zaire'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], default='', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id_request', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(blank=True, max_length=60)),
                ('last_name', models.CharField(blank=True, max_length=60)),
                ('email', models.EmailField(blank=True, max_length=50)),
                ('subject', models.CharField(blank=True, max_length=300)),
                ('text', models.TextField(blank=True, max_length=5000)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id_contract', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('document', models.FileField(null=True, upload_to='media/contract/')),
            ],
            options={
                'ordering': ['document'],
            },
        ),
        migrations.CreateModel(
            name='InternationalContract',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('contract_term', models.DateTimeField(default='2022-11-29 19:32:34')),
                ('contract_closing_date', models.DateTimeField()),
                ('contract_validity', models.CharField(blank=True, default='NO', max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='ProductRequest',
            fields=[
                ('id_product_request', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('title', models.CharField(blank=True, max_length=300)),
                ('description', models.TextField(blank=True, max_length=1000)),
                ('quantity', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('requested_date', models.DateTimeField()),
                ('temperature_care', models.CharField(blank=True, default='NO', max_length=2)),
                ('delivery_place_city', models.CharField(blank=True, max_length=300)),
                ('delivery_place_address', models.CharField(blank=True, max_length=300)),
                ('delivery_address_number', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(999999)])),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_request', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id_transaction', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('id_product', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10000000000)])),
                ('id_transport', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10000000000)])),
                ('timestamp', models.DateTimeField(default='2022-11-29 19:32:34')),
                ('product', models.CharField(blank=True, max_length=100)),
                ('type_sale', models.CharField(choices=[('NACIONAL', 'NACIONAL'), ('INTERNACIONAL', 'INTERNACIONAL')], default='NACIONAL', max_length=15)),
                ('quantity', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('producer', models.CharField(blank=True, max_length=100)),
                ('client', models.CharField(blank=True, max_length=100)),
                ('transportist', models.CharField(blank=True, max_length=100)),
                ('price', models.IntegerField(validators=[django.core.validators.MinValueValidator(1000), django.core.validators.MaxValueValidator(1000000000)])),
                ('total', models.IntegerField(validators=[django.core.validators.MinValueValidator(1000), django.core.validators.MaxValueValidator(1000000000)])),
                ('transport_status', models.CharField(blank=True, choices=[('NO', 'NO'), ('SI', 'SI')], default='NO', max_length=2)),
                ('transport_type', models.CharField(blank=True, choices=[('CAMION', 'CAMION'), ('CAMIONETA', 'CAMIONETA'), ('AUTO', 'AUTO'), ('AVION', 'AVION'), ('AVIONETA', 'AVIONETA'), ('HELICOPTERO', 'HELICOPTERO'), ('BARCO', 'BARCO'), ('LANCHA', 'LANCHA')], max_length=150)),
                ('transport_patent', models.CharField(blank=True, max_length=20)),
                ('transport_size', models.CharField(blank=True, max_length=50)),
                ('transport_capacity', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10000)])),
                ('transport_refrigeration', models.CharField(blank=True, choices=[('NO', 'NO'), ('SI', 'SI')], default='NO', max_length=2)),
                ('status', models.CharField(choices=[('PENDIENTE', 'PENDIENTE'), ('APROBADO', 'APROBADO'), ('RECHAZADO', 'REFHAZADO')], default='PENDIENTE', max_length=20)),
            ],
            options={
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='TransportRequestStatus',
            fields=[
                ('id_transaction', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('id_product', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10000000000)])),
                ('id_transport', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10000000000)])),
                ('producer', models.CharField(blank=True, max_length=150)),
                ('client', models.CharField(blank=True, max_length=150)),
                ('transportist', models.CharField(blank=True, max_length=150)),
                ('status', models.CharField(choices=[('PEDIDO AUN NO PROCESADO', 'PEDIDO AUN NO PROCESADO'), ('PEDIDO PROCESADO', 'PEDIDO PROCESADO'), ('EN TRANSITO', 'EN TRANSITO'), ('PEDIDO ENTREGADO', 'PEDIDO ENTREGADO')], default='PEDIDO AUN NO PROCESADO', max_length=25)),
                ('tracking_number', models.CharField(max_length=8)),
            ],
        ),
        migrations.CreateModel(
            name='Transport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default='2022-11-29 19:32:34')),
                ('image', models.ImageField(null=True, upload_to='media/post/transport/')),
                ('type', models.CharField(blank=True, choices=[('CAMION', 'CAMION'), ('CAMIONETA', 'CAMIONETA'), ('AUTO', 'AUTO'), ('AVION', 'AVION'), ('AVIONETA', 'AVIONETA'), ('HELICOPTERO', 'HELICOPTERO'), ('BARCO', 'BARCO'), ('LANCHA', 'LANCHA')], default='CAMION', max_length=15)),
                ('patent', models.CharField(blank=True, max_length=20)),
                ('size', models.CharField(blank=True, max_length=50)),
                ('capacity', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('refrigeration', models.CharField(choices=[('NO', 'NO'), ('SI', 'SI')], default='NO', max_length=2)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transport', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['timestamp', 'type'],
            },
        ),
        migrations.CreateModel(
            name='Relationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relationships', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_to', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RechargeTransaction',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('id_bank_account', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10000000000)])),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('charge', models.IntegerField(validators=[django.core.validators.MinValueValidator(1000), django.core.validators.MaxValueValidator(1000000000)])),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recharge', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(default='media/profile/user.ico', upload_to='')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProductRequestStatus',
            fields=[
                ('id_product_request_status', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('id_offered_product', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10000000000)])),
                ('id_client', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10000000000)])),
                ('id_producer', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10000000000)])),
                ('id_offered_transport', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10000000000)])),
                ('offered_product', models.CharField(blank=True, max_length=150)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('offered_transport', models.CharField(blank=True, default='', max_length=150)),
                ('status', models.CharField(choices=[('PENDIENTE', 'PENDIENTE'), ('APROBADO', 'APROBADO'), ('RECHAZADO', 'REFHAZADO')], default='PENDIENTE', max_length=20)),
                ('id_product_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_request_status', to='maipogrande.productrequest')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(default='2022-11-29 19:32:34')),
                ('title', models.CharField(blank=True, max_length=300)),
                ('description', models.TextField(blank=True, max_length=5000)),
                ('price', models.IntegerField(validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(1000000000)])),
                ('quantity', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('type_sale', models.CharField(choices=[('NACIONAL', 'NACIONAL'), ('INTERNACIONAL', 'INTERNACIONAL')], default='NACIONAL', max_length=15)),
                ('quality', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('image', models.ImageField(null=True, upload_to='media/post/product/')),
                ('owner_full_name', models.CharField(blank=True, max_length=100)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp', 'price'],
            },
        ),
        migrations.CreateModel(
            name='BankAccount',
            fields=[
                ('id_bank_account', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('bank_name', models.CharField(choices=[('BANCO ESTADO', 'BANCO ESTADO'), ('MERCADO PAGO', 'MERCADO PAGO'), ('TAPP CAJA LOS ANDES', 'TAPP CAJA LOS ANDES'), ('PREPAGO TENPO', 'PREPAGO TENPO'), ('PREPAGO LOS HEROES', 'PREPAGO LOS HEROES'), ('COOPEUCH', 'COOPEUCH'), ('BANCO BBVA', 'BANCO BBVA'), ('BANCO CONSORCIO', 'BANCO CONSORCIO'), ('BANCO RIPLEY', 'BANCO RIPLEY'), ('BANCO FALABELLA', 'BANCO FALABELLA'), ('BANCO SECURITY', 'BANCO SECURITY'), ('THE BANK OF TOKYO MITSUBISHI UFJ', 'THE BANK OF TOKYO MITSUBISHI UFJ'), ('BANCO ITAU', 'BANCO ITAU'), ('BANCO SANTANDER', 'BANCO SANTANDER'), ('HSBC BANK CHILE', 'HSBC BANK CHILE'), ('BICE', 'BICE'), ('CORP BANCA', 'CORP BANCA'), ('BANCO DE CREDITO E INVERSIONES', 'BANCO DE CREDITO E INVERSIONES'), ('SCOTIABANK DESARROLLO', 'SCOTIABANK DESARROLLO'), ('BANCO INTERNACIONAL', 'BANCO INTERNACIONAL'), ('BANCO DE CHILE', 'BANCO DE CHILE')], default='', max_length=50)),
                ('type_bank_account', models.CharField(choices=[('CUENTA CORRIENTE', 'CUENTA CORRIENTE'), ('CUENTA AHORRO', 'CUENTA AHORRO'), ('CUENTA VISTA', 'CUENTA VISTA'), ('CUENTA RUT', 'CUENTA RUT'), ('CHEQUERA ELECTRONICA', 'CHEQUERA ELECTRONICA')], default='', max_length=25)),
                ('bank_account_number', models.IntegerField(validators=[django.core.validators.MinValueValidator(1000), django.core.validators.MaxValueValidator(999999999999)])),
                ('bank_amount', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(999999999)])),
                ('owner_full_name', models.CharField(blank=True, max_length=100)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bank', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['bank_name'],
            },
        ),
        migrations.AddIndex(
            model_name='relationship',
            index=models.Index(fields=['from_user', 'to_user'], name='maipogrande_from_us_d02ce7_idx'),
        ),
    ]
